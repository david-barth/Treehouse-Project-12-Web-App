{"version":3,"sources":["Components/Nav.js","Components/SideNav_Components/SideItem1.js","Components/SideNav_Components/SideItem2.js","Components/SideNav_Components/SideItem3.js","Components/SideNav_Components/SideItem4.js","Components/SideNav_Components/SideNav.js","Components/ErrorPart.js","Components/SearchForm_Components/ModeSelect.js","Components/SearchForm_Components/ModeInputs.js","Components/SearchForm_Components/GeoSelect.js","Components/SearchForm_Components/Explanation.js","Components/SearchForm_Components/TweetInput.js","Components/SearchForm_Components/SearchSelect.js","Components/SearchForm_Components/HashInputs.js","Components/SearchForm_Components/HashtagFilter.js","Components/SearchForm_Components/SearchForm.js","Components/LoadingBar.js","Components/Stat_Components/StatExplanation.js","Components/Stat_Components/StatDisplay.js","Components/Stat_Components/StatButtons.js","Components/Stat_Components/Stat.js","Components/NewsDisplay_Components/Article.js","Components/NewsDisplay_Components/NewsDisplay.js","App.js","serviceWorker.js","index.js"],"names":["Nav","props","className","id","onClick","componentChange","to","newSearch","SideItem1","src","SideItem2","SideItem3","SideItem4","SideNav","sideNavRef","React","createRef","elems","this","current","M","Sidenav","init","ref","href","data-target","exact","path","component","Component","ErrorPart","searchCount","tweetSearch","tweetCount","statusCode","message","ModeSelect","select","ref1","FormSelect","onChange","toggle","required","defaultValue","value","disabled","ModelInputs","geoState","ref2","ref3","placeholder","type","htmlFor","advance","GeoSelect","reference","addValue","Explanation","TweetInput","ref4","ref5","ref6","name","checked","buttonState","radioChoice","SearchSelect","HashInputs","ref7","ref8","hashState","HashtagFilter","SearchForm","geoRef","hashRef","state","radioState","formPart","initialize","bind","advanceForm","geoSelection","hashSelection","validationCheck","setState","geoNode","hashNode","style","display","signal","alert","inputs","initial","i","regexNum","search","e","selection","target","prevState","onSubmit","submitHandler","LoadingBar","StatExplanation","StatDisplay","stats","rec","StatButtons","getNews","Stat","Article","date","articleInfo","split","articleNum","title","section","url","NewsDisplay","selectedArticle","articleCount","selectArticle","selected","selectionNumber","activeArticle","map","recNum","recString","toString","App","activeComponent","refCollection","submitHandler1","submitHandler2","formatNews","prepareStats","button","renderBar","fetch","response","json","newsArticles","code","formatted","container","article","newsObject","webTitle","sectionName","webUrl","webPublicationDate","push","active","initialState","preventDefault","inputValues","assembleValues","sendValues","valueCollection","forEach","endpoint","postData","Object","assign","method","headers","body","JSON","stringify","fetchRequest","undefined","renderStat","activePart","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.3a43843c.chunk.js","sourcesContent":["import React from 'react';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport 'materialize-css/dist/css/materialize.min.css';\r\n\r\n\r\nconst Nav = (props) => {\r\n    return (\r\n        <nav>\r\n            <div className=\"nav-wrapper\" id=\"nav\" onClick={props.componentChange}>\r\n                <NavLink to=\"/\" id=\"Home\" className=\"brand-logo\">Tweet News Recommender</NavLink>\r\n                <ul id=\"nav-mobile\" className=\"right hide-on-med-and-down\">\r\n                    <li><NavLink id=\"Intro\" to=\"/\">About this app...</NavLink></li>\r\n                    <li><NavLink id=\"SearchForm\" to=\"/search\" onClick={props.newSearch}>Start a new search!</NavLink></li>\r\n                    <li><NavLink id=\"Stat\" to=\"/stats\">Tweet Statistics</NavLink></li>\r\n                    <li><NavLink id=\"NewsDisplay\" to=\"/display\">Read your news</NavLink></li>\r\n                </ul>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\n/** \r\n * Nav component contains all the main routing for the SideNav, SearchForm, Stat, and NewsDisplay components. \r\n * 'Start a new search!' will trigger a complete wip of all current tweet statistics and of the current input vector in the database. \r\n*/\r\n\r\nexport default Nav; ","import React from 'react';\r\nimport 'materialize-css/dist/css/materialize.min.css';\r\n\r\n\r\nconst SideItem1 = () => {\r\n    return (\r\n        <div className=\"col s9\">\r\n            <div className=\"col s12 blue lighten-3\">\r\n                <div className=\"card horizontal blue lighten-1\">\r\n                    <div className=\"card-image\">\r\n                    <img src=\"https://techinsight.com.vn/wp-content/uploads/2019/08/Untitled-1-17.jpg\" />\r\n                    </div>\r\n                    <div className=\"card-stacked\">\r\n                    <div className=\"card-content\">\r\n                        <p>Machine learning is more important than ever before, especially in web apps!\r\n                            Web apps powered by machine learning can predict, learn, and understand our online behaviors.\r\n                            Why is this important?  Because, these more advanced web apps can serve content customized to our tastes and preferences. \r\n                            Imagine being able to read news articles or get movie suggestions based on your tweets?\r\n                            Or even better! Imagine having friends suggested to you based on your writing style or how you play a game?\r\n                            Machine learning let's ALL of this happen. Many of these ideas are already used by Amazon, google, and more to transform your online browser experience. \r\n                            Now, even in smaller scale web apps, the power of these algorithms can be used in creative and amazing ways. \r\n                            This is such a web app...\r\n                        </p>\r\n                    </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n/**\r\n * Component used to host elements containing overview of the web app. \r\n * Included in SideNav.  \r\n * Main limitation: Can be reduced to a more reusable form in future iterations of the web app. \r\n */\r\n\r\nexport default SideItem1; ","import React from 'react';\r\nimport 'materialize-css/dist/css/materialize.min.css';\r\n\r\n\r\nconst SideItem2 = () => {\r\n    return (\r\n        <div className=\"col s12 m7 blue lighten-3\">\r\n            <h4 className=\"header\">Machine Learning Powered</h4>\r\n            <div className=\"card horizontal blue lighten-1\">\r\n                <div className=\"card-image\">\r\n                <img src=\"https://databricks.com/wp-content/uploads/2019/02/neural1.jpg\" />\r\n                </div>\r\n                <div className=\"card-stacked\">\r\n                <div className=\"card-content\">\r\n                    <p>This app is powered by a machine learning algorithm called a \"Neural Network\". \r\n                    Modeled off of human neurons, neural networks take in batches of inputs through the \"input layer\". \r\n                    This input data is modified through calculations carried out into 1 or more \"hidden layers\". \r\n                    The data is then sent out in its final form as a prediction through the \"output layer\". \r\n                    The prediction can be used either to guess a number or to generate a categorization for something. \r\n                    In this app, the input data are batches of tweets and the output is a prediction for a category of news article. \r\n                    </p>\r\n                </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}; \r\n\r\n/**\r\n * Component contains elements hosting explanation for basic neural network theory.  \r\n */\r\n\r\nexport default SideItem2; ","import React from 'react';\r\nimport 'materialize-css/dist/css/materialize.min.css';\r\n\r\n\r\nconst SideItem3 = () => {\r\n    return (\r\n        <div className=\"col s12 m7 blue lighten-3\">\r\n            <h4 className=\"header\">What Happens?</h4>\r\n            <div className=\"card horizontal blue lighten-1\">\r\n                <div className=\"card-image\">\r\n                <img src=\"https://ona16.journalists.org/wp-content/uploads/sites/12/2016/09/smart-news-logo.png\" />\r\n                </div>\r\n                <div className=\"card-stacked\">\r\n                <div className=\"card-content\">\r\n                    <p>\r\n                        This app's operation is very simple: it gathers tweets off of twitter, batches them together, feeds them to a neural network, and then uses the resulting prediction to serve news topics.\r\n                        In a way, we can call this \"smart news\" because the recommended news topics will change depending on the word content of the tweets fed into the neural network. \r\n                        The topics are: world news, science and technology, business news, soccer news, and environmental news; all articles are gathered from The Guardian. \r\n                        If the gathered tweet word content reflects the label 'soccer', then soccer will be the first in your recommendations and so on. \r\n                        Overall, machine learning allows for a flexible and adaptive approach to news recommendation. \r\n                    </p>\r\n                </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}; \r\n\r\n/**\r\n * Component contains explanation on the app's overall purpose and functionality. \r\n * Information provided includes: app's targeted news topics and basic interpretation of app analytical process. \r\n */\r\n\r\nexport default SideItem3; ","import React from 'react';\r\nimport 'materialize-css/dist/css/materialize.min.css';\r\n\r\n\r\nconst SideItem4 = () => {\r\n    return (\r\n        <div className=\"col s12 m7 blue lighten-3\">\r\n            <h4 className=\"header\">An interplay of numbers and words</h4>\r\n            <div className=\"card horizontal blue lighten-1\">\r\n                <div className=\"card-image\">\r\n                <img src=\"https://www.havefunteaching.com/wp-content/uploads/2013/07/number-word-flash-cards.jpg\" />\r\n                </div>\r\n                <div className=\"card-stacked\">\r\n                <div className=\"card-content\">\r\n                    <p>\r\n                        A neural network cannot understand words directly.  \r\n                        Instead, it relies on words to be converted to patterns of numbers in order to intepret word content and give a reliable prediction.  \r\n                        This app does just that; batches of tweets are converted into numbers and these numbers are fed into the neural network for prediction results. \r\n                        The patterning of these numbers are recognized by the neural network as patterns associated with \"world news\", \"science and technology\", \"business news\", \"soccer news\", and \"environmental news\". \r\n                        The more numbered word patterns a neural network \"knows\", the more flexible and responsive the predictions it can give!\r\n                    </p>\r\n                </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}; \r\n\r\n/**\r\n * Component contains explanation of how the app neural network interprets input patterns. \r\n */\r\n\r\nexport default SideItem4; ","import React, {Component} from 'react';\r\nimport {\r\n    Switch,\r\n    Route,\r\n    NavLink\r\n  } from \"react-router-dom\";\r\nimport M from 'materialize-css/dist/js/materialize.min.js'; \r\nimport 'materialize-css/dist/css/materialize.min.css';\r\n\r\n//Component Imports: \r\nimport SideItem1 from './SideItem1';\r\nimport SideItem2 from './SideItem2';\r\nimport SideItem3 from './SideItem3';\r\nimport SideItem4 from './SideItem4'; \r\n\r\n\r\n\r\nclass SideNav extends Component {\r\n\r\n    constructor() {\r\n        super();         \r\n        this.sideNavRef = React.createRef(); \r\n    }\r\n\r\n    componentDidMount() {\r\n        const elems = this.sideNavRef.current; \r\n        const instances = M.Sidenav.init(elems);\r\n    }\r\n    /** \r\n     * Constructor ref used to initialize the sideNav funtionality on component mounting. \r\n    */\r\n\r\n    render() {\r\n        return (\r\n            <div  id=\"side\" className=\"row\">\r\n                <div className=\"col s3 blue lighten-4\">\r\n                    <ul id=\"slide-out\" ref={this.sideNavRef}  className=\"sidenav blue lighten-4\">\r\n                        <li><NavLink className=\"waves-effect\" to=\"/\">Intro</NavLink></li>\r\n                        <li><NavLink className=\"waves-effect\" to=\"/MLPowered\">Machine Learning Powered</NavLink></li>\r\n                        <li><NavLink className=\"waves-effect\" to=\"/underHood\">What Happens?</NavLink></li>\r\n                        <li><NavLink className=\"waves-effect\" to=\"/interplay\">An Interplay of Numbers and Words</NavLink></li>\r\n                    </ul>\r\n                    <a href=\"#\" data-target=\"slide-out\" className=\"sidenav-trigger\"><p>Intro</p><i className=\"material-icons\">menu</i></a>\r\n                </div>\r\n\r\n                <Switch>\r\n                    <Route exact path=\"/\" component={() => (<SideItem1 />)} />\r\n                    <Route exact path=\"/MLPowered\" component={() => (<SideItem2 />)} />\r\n                    <Route exact path=\"/underHood\" component={() => (<SideItem3 />)} />\r\n                    <Route exact path=\"/interplay\" component={() => (<SideItem4 />)}/>\r\n                </Switch>\r\n            </div>\r\n        )\r\n    }\r\n}; \r\n\r\n/** \r\n * The SideNav component contains the overview of the app, basic neural network theory, and explanation of the app processes. \r\n * Component divides these explanations into 4 categories or sections. \r\n * The sideNav component is only present in the 'Non-functional' rendering of the app and is accessed via the main Nav component. \r\n*/\r\n\r\nexport default SideNav; ","import React from 'react';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport 'materialize-css/dist/css/materialize.min.css';\r\n\r\nconst ErrorPart = (props) => {\r\n\r\n    let searchCount = props.tweetSearch\r\n\r\n    //Reset search count to 0 in case of error in initial search (e.g. no tweets found): \r\n    if (props.tweetCount === 0) {\r\n        searchCount = 1; \r\n    }\r\n\r\n    //Render 'Initial Search' version of component in case of error: \r\n    if (searchCount === 1) {\r\n        return (\r\n            <div className=\"container\">\r\n                 <p>Error Code {props.statusCode}: &ensp; {props.message}</p>\r\n                 <div className=\"row\">\r\n                    <div className=\"col s6 offset-s3\">\r\n                        <NavLink to=\"/search\" id=\"SearchFormError\" onClick={props.componentChange} className=\"waves-effect waves-light btn\">Redo initial search</NavLink>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    } \r\n\r\n    //Render 'Augment Search' version of component in case of error: \r\n    else if (searchCount > 1) {\r\n        return (\r\n            <div className=\"container\">\r\n                 <p>Error Code {props.statusCode}: &ensp; {props.message}</p>\r\n                 <div className=\"row\">\r\n                    <div className=\"col s6 offset-s3\">\r\n                        <NavLink to=\"/search\" id=\"AugmentError\" onClick={props.componentChange} className=\"waves-effect waves-light btn\">Perform another augment search</NavLink>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    //Render 'Get News' version of component in case of error during news GET request: \r\n    else {\r\n        return (\r\n        <div className=\"container\">\r\n            <p>Error Code 500: News retrieval failed.  Please click 'Start a new search!' to begin a new search</p>\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\n/** \r\n * ErrorPart component contains error handling elements for different situations in the web app process. \r\n * Three error situations are covered: initial search errors, augment search errors, and news GET errors. \r\n * Initial search errors occur only in the first tweet search and after augment search errors will occur. \r\n * Only very basic error handling, with advice is given.  More advanced and user responsive error handling will be implemented in the future.\r\n*/\r\n\r\nexport default ErrorPart;","import React, {Component} from 'react';\r\nimport '../../App.css';\r\nimport M from 'materialize-css/dist/js/materialize.min.js'\r\nimport 'materialize-css/dist/css/materialize.min.css';\r\n\r\n\r\n\r\nclass ModeSelect extends Component {\r\n\r\n    componentDidMount() {\r\n        const select = this.props.ref1.current;  \r\n        var instances = M.FormSelect.init(select);\r\n    }\r\n    /**\r\n     * Initialize Google Materialize selection menu upon component mounting. \r\n     */\r\n\r\n    render() {\r\n        const ref1 = this.props.ref1;\r\n        return (\r\n            <div className=\"row\">\r\n                <div className=\"col s12 m6\">\r\n                    <div className=\"card blue darken-1\">\r\n                    <div className=\"card-content white-text\">\r\n                        <span className=\"card-title\">Local or Global?</span>\r\n                        <p> Select whether you wish to gather tweets from around the world (\"Global\") or \r\n                        if you wish to gather tweets within a certain region (\"Geographical\"). \r\n                        All Geographical Mode searches require a location and will be made within a certain radius\r\n                        of that location (in km).\r\n                        </p>\r\n                    </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"input-field col s6\" onChange={this.props.toggle}>\r\n                    <select id=\"Mode Select\" ref={ref1} required defaultValue={'DEFAULT'}>\r\n                    <option value=\"DEFAULT\" disabled>Choose your mode</option>\r\n                    <option value=\"global\">Global</option>\r\n                    <option value=\"geographical\">Geographical</option>\r\n                    </select>\r\n                    <label>Mode Select:</label>\r\n                </div>\r\n            </div>    \r\n        )\r\n    }\r\n}\r\n\r\n/**\r\n * ModeSelect component contains elements and functionalities to enable or disable a geographical tweet search. \r\n * Select menu choice moderates 'geoState' state information in SearchForm, which enables or disables the geographical search inputs. \r\n */\r\n\r\nexport default ModeSelect; ","import React, {Fragment, Component} from 'react';\r\nimport '../../App.css';\r\nimport 'materialize-css/dist/css/materialize.min.css';\r\n\r\n\r\nclass ModelInputs extends Component {\r\n   \r\n    render() {\r\n        const geoState = this.props.geoState;\r\n        const ref2 = this.props.ref2; \r\n        const ref3 = this.props.ref3;  \r\n\r\n        return (\r\n            <Fragment>\r\n              <div className=\"row\">\r\n                  <div className=\"input-field col s12\">\r\n                      <input \r\n                              placeholder=\"Type a location...\" \r\n                              id=\"location\" \r\n                              type=\"text\" \r\n                              className=\"validate\"\r\n                              required  \r\n                              disabled={geoState}\r\n                              ref={ref2} \r\n                              />\r\n                      <label htmlFor=\"location\">Location</label>\r\n                  </div>\r\n              </div>\r\n      \r\n              <div className=\"row\">\r\n                  <div className=\"input-field col s12\">\r\n                      <input  \r\n                              placeholder=\"Specify a radius...\" \r\n                              id=\"radius\" \r\n                              type=\"text\" \r\n                              className=\"validate\"\r\n                              required \r\n                              disabled={geoState}\r\n                              ref={ref3} \r\n                              />\r\n                      <label htmlFor=\"radius\">Radius</label>\r\n                  </div>\r\n                  <div className=\"col s6 offset-s5\">\r\n                      <a id=\"next-button\" onClick={this.props.advance} className=\"waves-effect waves-light btn-large\">Next</a>\r\n                  </div>\r\n              </div>\r\n            </Fragment>\r\n          )\r\n    }\r\n}\r\n\r\n/**\r\n * ModeInputs component contains all inputs and functionalities needed for the 'Geographical Search Mode' of SearchForm. \r\n * 'geoState' state in SearchForm used to enable/disable 'Location' and 'Radius' inputs, which is mediated by \"Geographical Mode\" vs \"Global Mode\" selection.\r\n * alert() based Form validation used, with customized letter constraint for 'Location' and number constraint for 'Radius'.  No empty inputs allowed either. \r\n * Display style switch to 'none' (triggered by 'Next' button) prevents easy use of HTML 5 validation schemes for this half of SearchForm. \r\n */\r\n\r\nexport default ModelInputs; ","import React, {Component} from 'react';\r\nimport '../../App.css';\r\nimport 'materialize-css/dist/css/materialize.min.css';\r\nimport ModeSelect from './ModeSelect'; \r\nimport ModelInputs from './ModeInputs';\r\n\r\n\r\n\r\nclass GeoSelect extends Component {\r\n\r\n    render() {\r\n        const ref1 = this.props.ref1; \r\n        const ref2 = this.props.ref2; \r\n        const ref3 = this.props.ref3; \r\n\r\n        return (\r\n            <div id=\"section1\" ref={this.props.reference} >\r\n                <ModeSelect \r\n                            toggle={this.props.toggle} \r\n                            addValue={this.props.addValue} \r\n                            ref1={ref1}\r\n                            />\r\n                <ModelInputs \r\n                            advance={this.props.advance} \r\n                            geoState={this.props.geoState} \r\n                            ref2={ref2}\r\n                            ref3={ref3}\r\n                            />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n/**\r\n * GeoSelect Component is a wrapper component that contains elements for the \"Geographical Search\" half of SearchForm. \r\n * Component display is disabled upon clicking of the \"Next\" button within this component. \r\n */\r\n\r\nexport default GeoSelect; ","import React from 'react'; \r\nimport 'materialize-css/dist/css/materialize.min.css';\r\n\r\n\r\nconst Explanation = () => {\r\n    return (\r\n        <div className=\"col s12 m6\">\r\n            <div className=\"card blue darken-1\">\r\n            <div className=\"card-content white-text\">\r\n                <span className=\"card-title\">Tweet Specifications:</span>\r\n                <p>\r\n                Now you specify the desired search subject of your tweet.  \r\n                This is preferably a subject that is news worthy and related to \"World News\", \"Science and Technology\", \"Business\", \"Football\", or \"Environment\". \r\n                After, you may choose to further focus your search by adding in 2 desired words for Hashtag filtering. \r\n                This will allow you to search for tweets based on specific Hashtags. These are optional and you may proceed without this. \r\n                </p>\r\n            </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}; \r\n\r\n/**\r\n * Explanation component displays a minor explanation on how to conduct the second half of the SearchForm component, the \"tweet subject\"\r\n */\r\n\r\nexport default Explanation; ","import React, {Fragment, Component} from 'react';\r\nimport 'materialize-css/dist/css/materialize.min.css';\r\n\r\n\r\nclass TweetInput extends Component {\r\n    constructor(props) {\r\n        super(props); \r\n\r\n        //Refs:\r\n        this.ref4 = this.props.ref4; \r\n        this.ref5 = this.props.ref5;\r\n        this.ref6 = this.props.ref6;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n                <div className=\"input-field col s6\">\r\n                    <input  placeholder=\"Enter tweet subject...\" \r\n                            id=\"tweetSubject\" \r\n                            type=\"text\" \r\n                            className=\"validate\"\r\n                            required \r\n                            disabled={false}\r\n                            ref={this.ref4}\r\n                            />\r\n                    <label htmlFor=\"tweet_Subject\">Tweet Subject</label>\r\n                </div>        \r\n    \r\n                <div className=\"input-field col s6\" onChange={this.props.toggle}>\r\n                    <p>\r\n                        <label>\r\n                        <input \r\n                                name=\"hashtagFilter\" \r\n                                value=\"option1\" \r\n                                type=\"radio\" \r\n                                checked={this.props.buttonState === 'option1'} \r\n                                onChange={this.props.radioChoice}\r\n                                ref={this.ref5}\r\n                        />\r\n                        <span>I want Hashtag Filtering</span>\r\n                        </label>\r\n                    </p>\r\n                    <p>\r\n                        <label>\r\n                        <input \r\n                                name=\"general\" \r\n                                value=\"option2\" \r\n                                type=\"radio\" \r\n                                checked={this.props.buttonState === 'option2'}\r\n                                onChange={this.props.radioChoice}\r\n                                ref={this.ref6}\r\n                                />\r\n                        <span>No a general search is good</span>\r\n                        </label>\r\n                    </p>\r\n                </div>          \r\n            </Fragment>\r\n        )        \r\n    }\r\n}\r\n\r\n/**\r\n * TweetInput component holds inputs related to tweet subject and 2 hashtags related to the main search subject. \r\n * The usage of the 2 hashtag inputs is mediated by the radio buttons, which enable or disable the hashtag inputs based on desire to include or exclude hashtags from the search. \r\n * This half of the SearchForm inputs uses basic HTML 5 validation to validate for filled values in all inputs. \r\n * Numbers and emojis can be included in the scope of searches, hence no further validation constraints are used. \r\n */\r\n\r\nexport default TweetInput; ","import React, {Component} from 'react';\r\nimport 'materialize-css/dist/css/materialize.min.css';\r\nimport Explanation from './Explanation'; \r\nimport TweetInput from './TweetInput'; \r\n\r\n\r\nclass SearchSelect extends Component {\r\n    render() {\r\n\r\n        const ref4 = this.props.ref4; \r\n        const ref5 = this.props.ref5; \r\n        const ref6 = this.props.ref6; \r\n\r\n        return (\r\n            <div className=\"row\">\r\n                <Explanation /> \r\n                <TweetInput \r\n                            radioChoice={this.props.radioChoice} \r\n                            buttonState={this.props.buttonState}\r\n                            toggle={this.props.toggle}\r\n                            addValue={this.props.addValue}\r\n                            ref4={ref4}\r\n                            ref5={ref5}\r\n                            ref6={ref6}\r\n                            /> \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n/**\r\n * SearchSelect is a wrapper component for elements and functionalities relating to radio button enabling / disabling of hashtag search inputs. \r\n * Elements of explanation for the 'Tweet subject' half of SearchForm are contained in this wrapper component. \r\n */\r\n\r\nexport default SearchSelect; ","import React, { Fragment, Component } from 'react';\r\nimport 'materialize-css/dist/css/materialize.min.css';\r\n\r\n\r\n\r\nclass HashInputs extends Component {\r\n\r\n    render() {\r\n\r\n        const ref7 = this.props.ref7; \r\n        const ref8 = this.props.ref8; \r\n\r\n        return (\r\n            <Fragment>\r\n                <div className=\"row\">\r\n                    <div className=\"input-field col s12\">\r\n                        <input \r\n                                placeholder=\"Enter hashtag here...\" \r\n                                id=\"hashtag1\" \r\n                                type=\"text\" \r\n                                className=\"validate\"\r\n                                required \r\n                                disabled={this.props.hashState}\r\n                                ref={ref7}\r\n                                />\r\n                        <label htmlFor=\"hashtag1\">Hashtag Item 1:</label>\r\n                    </div>\r\n                </div>\r\n    \r\n                <div className=\"row\">\r\n                    <div className=\"input-field col s12\">\r\n                        <input \r\n                                placeholder=\"Enter second hashtag here...\" \r\n                                id=\"hashtag2\" \r\n                                type=\"text\" \r\n                                className=\"validate\"\r\n                                required \r\n                                disabled={this.props.hashState}\r\n                                ref={ref8}\r\n                                />\r\n                        <label htmlFor=\"hashtag2\">Hashtag Item 2:</label>\r\n                    </div>\r\n                </div>\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\n/**\r\n * HashInputs component contains inputs related to 'hashtag searching' for the 'tweet subject' of the tweet search. \r\n * hashState() props method enables/disables these inputs based on radio button choice in this half of the SearchForm. \r\n */\r\n\r\nexport default HashInputs; ","import React, {Component} from 'react';\r\nimport 'materialize-css/dist/css/materialize.min.css';\r\nimport SearchSelect from './SearchSelect'; \r\nimport HashInputs from './HashInputs'; \r\n\r\nclass HashtagFilter extends Component {\r\n\r\n    render() {\r\n        const ref4 = this.props.ref4; \r\n        const ref5 = this.props.ref5; \r\n        const ref6 = this.props.ref6; \r\n        const ref7 = this.props.ref7; \r\n        const ref8 = this.props.ref8;\r\n\r\n        return (\r\n            <div id=\"section2\" ref={this.props.reference}>\r\n                <SearchSelect \r\n                                radioChoice={this.props.radioChoice} \r\n                                buttonState={this.props.buttonState}\r\n                                toggle={this.props.toggle}\r\n                                addValue={this.props.addValue}\r\n                                ref4={ref4}\r\n                                ref5={ref5}\r\n                                ref6={ref6}\r\n                                /> \r\n                <HashInputs \r\n                                hashState={this.props.hashState}\r\n                                addValue={this.props.addValue}\r\n                                ref7={ref7}\r\n                                ref8={ref8}\r\n                                />\r\n                <div className=\"row\">\r\n                    <div className=\"col s6 offset-s5\">\r\n                        <button id=\"send\" className=\"btn-large waves-effect waves-light\" type=\"submit\" name=\"action\">Get my Tweets!\r\n                        <i className=\"material-icons right\">send</i>\r\n                        </button>\r\n                    </div>              \r\n                </div>  \r\n            </div>\r\n        );     \r\n    }\r\n}; \r\n\r\n/**\r\n * HashtagFilter component acts as a wrapper component for 'tweet subhect' and 'hashtag' inputs.  \r\n * Also contains submit button for form submission, for use with 'initial' and 'augment' searches, using submit handlders from the App component.\r\n */\r\n\r\nexport default HashtagFilter; ","import React, {Component} from 'react';\r\nimport 'materialize-css/dist/css/materialize.min.css';\r\nimport GeoSelect from './GeoSelect'; \r\nimport HashtagFilter from './HashtagFilter'; \r\n\r\n\r\nclass SearchForm extends Component {\r\n    \r\n    constructor() {\r\n        super();\r\n\r\n        //Refs: \r\n        this.geoRef = React.createRef(); \r\n        this.hashRef = React.createRef(); \r\n\r\n\r\n        //State Designations: \r\n        this.state = {\r\n            geoState: null, \r\n            hashState: null, \r\n            radioState: 'option1',\r\n            formPart: null,   \r\n        };\r\n\r\n        //Function Bindings: \r\n        this.initialize = this.initialize.bind(this);\r\n        this.advanceForm = this.advanceForm.bind(this); \r\n        this.geoSelection = this.geoSelection.bind(this);\r\n        this.hashSelection = this.hashSelection.bind(this); \r\n        this.radioChoice = this.radioChoice.bind(this);\r\n        this.validationCheck = this.validationCheck.bind(this); \r\n    }\r\n\r\n    initialize () {\r\n        this.setState({ \r\n            geoState: false,\r\n            hashState: false, \r\n            formPart: 1\r\n        }); \r\n    }\r\n    /**\r\n     * Initialize SearchForm states for geographical inputs, hashtag inputs, and form advvancement. \r\n     * formPart state indicates which half of the SearcForm component is displayed currently. \r\n     */\r\n    \r\n\r\n    componentDidMount() {\r\n        this.initialize();\r\n    }\r\n\r\n    /**\r\n     * SearchForm states are initialized upon component mounting. \r\n     */\r\n\r\n    componentDidUpdate() {\r\n       const geoNode = this.geoRef.current; \r\n       const hashNode = this.hashRef.current;\r\n\r\n       //Initialize displays of SearchForm subc-components\r\n       hashNode.style.display = 'none'\r\n       \r\n       //Alter displays of sub-components to advance to next half of the SearchForm component: \r\n       if (this.state.formPart === 2) {\r\n            geoNode.style.display = 'none'; \r\n            hashNode.style.display = 'block'; \r\n       }\r\n    }\r\n    /**\r\n     * formPart state examined to determine which half (geographical or hashtag) of SearchForm to display on component update. \r\n     */\r\n\r\n    advanceForm () {\r\n        //Apply alert() based validation constraints on Geographical Mode form elements: \r\n        const signal = this.validationCheck(); \r\n        \r\n        //Either update formPart state if validationCheck is passed or send alert with validation information: \r\n        if (signal === 'Pass') {\r\n            this.setState({formPart: 2});\r\n        } else {\r\n            alert(signal); \r\n        }\r\n    }\r\n    /** \r\n     * Method advances the SearchForm element from the 'Geographical' half to 'Hashtag/Tweet Subject' half upon validation passing. \r\n     * formPart state of 1 is tied to Geographical half and a state value of 2 is the tweet subject half. \r\n     * Customized valuidation schemes provided for this part, based on programmatic alert(). \r\n     * Method handdler is tied to the \"Next\" button. \r\n    */\r\n\r\n\r\n    validationCheck() {\r\n        let inputs = [\r\n            this.props.ref1.current, \r\n            this.props.ref2.current,\r\n            this.props.ref3.current \r\n        ]; \r\n\r\n        //Make check for global selection in mode select menu: \r\n        if (inputs[0].value === 'global') {\r\n            return 'Pass'; \r\n        }\r\n\r\n        //Set up initial message: \r\n        let initial = 'Please fill out or select the following fields:\\n'; \r\n        let message = initial; \r\n\r\n        //Make check for empty inputs: \r\n        for (let i in inputs) {\r\n           if (inputs[i].value === '' || inputs[i].value === 'DEFAULT' || inputs[i].disabled === true) {\r\n               message += `Field: ${inputs[i].id}\\n`\r\n           } \r\n        }\r\n\r\n        if (message !== initial) {\r\n            return message\r\n        }\r\n\r\n        //Check for numbers in radius input: \r\n        const regexNum = /^\\d+(\\\\.\\d+)?$/; \r\n        if (inputs[1].value.search(regexNum) === 0) {\r\n            message = 'Location field: Please enter a location using letters only.'; \r\n            return message; \r\n        }\r\n       \r\n        //Check for numbers in radius input: \r\n        if (inputs[2].value.search(regexNum) === -1) {\r\n            message = 'Radius Field: Please enter a numerical value';\r\n            return message;  \r\n        }\r\n        \r\n        return 'Pass';  \r\n    }\r\n    /** \r\n     * Method defines and uses validation constraints for 'Mode Select', 'Location', and 'Radius' inputs/elements. \r\n     * Constraints include: checks for empty input values, letter values for Location, and numerical values for Radius. \r\n     * Nethod sends a 'Pass' signal if validation constraints are met or if 'Global' mode is selected in 'Mode Select'.\r\n     * Otherwise, a validation error message is returned with information on which validation constraints failed.  \r\n    */\r\n\r\n    async geoSelection(e) {\r\n        const selection = e.target.value;\r\n        \r\n        //Toggle geoState based on which Mode Select option is selected: \r\n        if (selection === 'global') {\r\n            await this.setState({geoState: true}); \r\n        } \r\n        else if (selection === 'geographical') {\r\n            await this.setState({geoState: false}); \r\n        }\r\n    } \r\n    /** \r\n     * Handler sets the geostate state to true or false based on select menu choice. \r\n     * This state is used to enable or disable the 'Location' and 'Radius' inputs needed for a geographical search for tweets. \r\n     * Hanlder is tied to the select menu in 'ModeSelect' component. \r\n    */\r\n\r\n    \r\n\r\n    hashSelection() {\r\n        //Toggle hashState based on chosen option from radio button and the inverse of previous hashState: \r\n        if (this.state.radioState === 'option1' && !this.state.hashState) {\r\n            this.setState((prevState) => ({\r\n                hashState: !prevState.hashState  \r\n            })); \r\n        } \r\n        else if (this.state.radioState === 'option2' && this.state.hashState) {\r\n            this.setState((prevState) => ({\r\n                hashState: !prevState.hashState  \r\n            })); \r\n        }\r\n    }\r\n    /** \r\n     * Method enables or disables the hashtag inputs based on prior radio button selection.  \r\n     * Additional logic, based on prior hashState, is used to reinforce a binary behavior in input enabling/disabling based on radio button choice.\r\n     * Tied to the SearchSelect component. \r\n    */\r\n\r\n    radioChoice(e) {\r\n        this.setState({\r\n            radioState: e.target.value\r\n        });        \r\n    }\r\n    /** \r\n     * Handler sets radiosState value based on user selection of radio buttons. \r\n     * This state and hanlder 'reocrds' user choice on radio buttons in order to enable or disable hashtag input elements. \r\n     * Acts as the first step in the above 'hashSelection' handler. \r\n    */\r\n\r\n\r\n    render() {\r\n        const geoState = this.state.geoState; \r\n        const hashState = this.state.hashState; \r\n\r\n        const ref1 = this.props.ref1; \r\n        const ref2 = this.props.ref2; \r\n        const ref3 = this.props.ref3; \r\n        const ref4 = this.props.ref4; \r\n        const ref5 = this.props.ref5; \r\n        const ref6 = this.props.ref6; \r\n        const ref7 = this.props.ref7; \r\n        const ref8 = this.props.ref8; \r\n\r\n\r\n        return (\r\n            <div className=\"row\">\r\n                <form className=\"col s12\" onSubmit={this.props.submitHandler}>\r\n                        <GeoSelect \r\n                            toggle={this.geoSelection} \r\n                            geoState={geoState} \r\n                            advance={this.advanceForm}\r\n                            reference={this.geoRef}\r\n                            ref1={ref1}\r\n                            ref2={ref2}\r\n                            ref3={ref3}\r\n                        />\r\n                        <HashtagFilter \r\n                            radioChoice={this.radioChoice} \r\n                            buttonState={this.state.radioState}\r\n                            hashState={hashState}\r\n                            toggle={this.hashSelection}\r\n                            reference={this.hashRef}  \r\n                            ref4={ref4}\r\n                            ref5={ref5}\r\n                            ref6={ref6}\r\n                            ref7={ref7}\r\n                            ref8={ref8}\r\n                        />;  \r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n/** \r\n * SearchForm component contains all functionalities and elements needed to specify user's tweet search specifications. \r\n * The component is divided into 2 halfs: a 'Geographical' half and a 'Tweet Subject/Hashtag' half. \r\n * Geographical half: User selects if they want to commence with geographical mode search, which filters tweet search for tweets based on location within a certain radius. \r\n * Tweet Subject half: User selects if they wish to narrow the search based on including hashtag operators in the tweet search.  \r\n * If hashtag filtering is omitted, then primary tweet subject is specified here. \r\n * State is used to enable / disable certain inputs related to these search features. \r\n * Form sub-components are displayed once at a time, controlled via state.\r\n * Therefore, HTML 5 validation is only used for one half of the form while custom alert() validation is used for another half.\r\n*/\r\n\r\nexport default SearchForm; ","import React from 'react';\r\nimport 'materialize-css/dist/css/materialize.min.css';\r\n\r\n\r\nconst LoadingBar = () => {\r\n    return (\r\n        <div id=\"Loading\" className=\"progress\">\r\n            <div className=\"indeterminate\"></div>\r\n            <header>Loading...</header>\r\n        </div>\r\n    )\r\n}\r\n\r\n/**\r\n * Component contains a basic loading bar used for fetch requests to the backend. \r\n * Loading bar is used to sync frontend behavior with backend processs. \r\n */\r\n\r\nexport default LoadingBar; ","import React from 'react';\r\nimport '../../App.css';\r\nimport 'materialize-css/dist/css/materialize.min.css';\r\n\r\nconst StatExplanation = () => {\r\n    return (\r\n        <div className=\"col s12 m6\">\r\n              <div className=\"card blue darken-1\">\r\n                <div className=\"card-content white-text\">\r\n                  <span className=\"card-title\">Tweet Statistics:</span>\r\n                  <p>\r\n                   In this app, the neural network prediction works more accurately with at least 50 tweets.\r\n                   If the Tweet Count is lower, the accuracy of the news prediction will suffer and it is recommended to increase the tweet data input by performing another search. \r\n                   This section tells you if another search is recommended by showing you the search criteria you submitted, the number of tweets currently stored, and the number of searches made previously.\r\n                   A recommendation for data augmentation will be made if there are less than 50 tweets stored.  \r\n                   If you wish to make this augmentation then click \"Augment\" in order to perform another search.  \r\n                   In this case, it is recommended to either do a 'Glboal Search' and remove hashtags or to increase radius and change location. \r\n                   A search for a simlar subject is also suggested (e.g. 'President', if 'Trump' was made in the first search). \r\n                   If you wish to continue without performing another search, click \"Read!\"\r\n                  </p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}; \r\n\r\n/** \r\n * Component contains an explanation on the Stat component portion of the app and suggestions for augment search. \r\n * Suggestions relate on how to best increase the number of tweets found in an augment search. \r\n*/\r\n\r\nexport default StatExplanation; ","import React from 'react';\r\nimport '../../App.css';\r\nimport 'materialize-css/dist/css/materialize.min.css';\r\n \r\n\r\nconst StatDisplay = (props) => {\r\n    return (\r\n        <div className=\"collection\">\r\n            <a href=\"#!\" className=\"collection-item active\">Relevant Tweet Statistics...</a>\r\n            <a href=\"#!\" className=\"collection-item\">Individual Tweet Count:     {props.stats.tweetCount} </a>\r\n            <a href=\"#!\" className=\"collection-item\">Tweet Search Count:     {props.stats.tweetSearch} </a>\r\n            <a href=\"#!\" className=\"collection-item\">Data Augmentation:     {props.stats.rec} </a>\r\n        </div>\r\n    )\r\n}\r\n\r\n/** \r\n * Component displays tweet statistics including: number of tweets processed so far (tweet count) and number of completed searches (tweet search). \r\n * Tweet count statistic is used to make a recommendation on whether or not a news GET request should be made. \r\n * Statistics information derived from stats object passed from App component. \r\n*/\r\n\r\nexport default StatDisplay; ","import React from 'react';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport '../../App.css';\r\nimport 'materialize-css/dist/css/materialize.min.css';\r\n \r\n\r\nconst StatButtons = (props) => {\r\n    return (\r\n        <div className=\"row\">\r\n          <div className=\"col s1 offset-s4\">\r\n            <NavLink id=\"Augment\" onClick={props.componentChange} className=\"waves-effect waves-light btn-large\" to=\"/search\">Augment</NavLink>\r\n          </div>\r\n          <div className=\"col s1 offset-s1\">\r\n            <NavLink id=\"ReadNews\" onClick={props.getNews} className=\"waves-effect waves-light btn-large\" to=\"/display\">Read your news</NavLink>\r\n          </div>\r\n        </div>\r\n    )\r\n}; \r\n\r\n/** \r\n * Component contains buttons to allow news analysis and GET functionality as well as augment search functionality. \r\n * Augment search allows for a search for tweets of a subject related to the previous search subject. \r\n*/\r\n\r\nexport default StatButtons; ","import React, {Fragment, Component} from 'react';\r\nimport '../../App.css';\r\nimport 'materialize-css/dist/css/materialize.min.css';\r\n\r\n//Component Imports: \r\nimport StatExplanation from './StatExplanation'; \r\nimport StatDisplay from './StatDisplay';\r\nimport StatButtons from './StatButtons';  \r\n\r\n\r\n\r\nclass Stat extends Component {\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n                <div className=\"row\">\r\n                    <StatExplanation />\r\n                    <StatDisplay stats={this.props.stats} />\r\n                </div>\r\n                <StatButtons componentChange={this.props.componentChange} getNews={this.props.getNews} /> \r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\n/** \r\n * Stat component acts as a wrapper for tweet statistics and news retrieval functionalities on the frontend. \r\n * This component is updated to reflect the current number of searches and tweets present. \r\n * Component purpose is to inform the user about whether or not neural network analysis and news retrieval should be attempted. \r\n * This is done via a recommendation given in the component.\r\n * Functionality to do an 'augment' search, for better prediction accuracy is also contained here.   \r\n*/\r\n\r\nexport default Stat; \r\n\r\n\r\n","import React from 'react';\r\nimport '../../App.css';\r\nimport 'materialize-css/dist/css/materialize.min.css';\r\n \r\n\r\n\r\nconst Article = (props) => {\r\n    //Split date from time: \r\n    const timeAndDate = props.articleInfo.date.split('T'); \r\n    const date = timeAndDate[0]; \r\n\r\n    return (\r\n        <div className=\"row\" id={props.id}>\r\n            <div className=\"col s6 offset-s3\">\r\n                <div className=\"card medium\">\r\n                    <div className=\"card-image\">\r\n                    <img src=\"https://materializecss.com/images/sample-1.jpg\" />\r\n                    <span className=\"card-title\">Article {props.articleNum}: {props.articleInfo.title}</span>\r\n                    </div>\r\n                    <div className=\"card-content\">\r\n                    <p>\r\n                        The selected category is {props.articleInfo.section} and the date of publication is {date}\r\n                    </p>\r\n                    </div>\r\n                    <div className=\"card-action\">\r\n                    <a href={props.articleInfo.url}>News Article</a>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}; \r\n\r\n/**\r\n * Component progrmamatically holds the article title, category (section), date of publication and URL. \r\n * Displayed in a card and linked to NewsDisplay. \r\n */\r\n\r\nexport default Article; ","import React, {Fragment, Component} from 'react';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport '../../App.css';\r\nimport 'materialize-css/dist/css/materialize.min.css';\r\n\r\n//Component Imports: \r\nimport Article from './Article'; \r\n\r\n\r\nclass NewsDisplay extends Component {\r\n\r\n    constructor() {\r\n        super(); \r\n\r\n        //States: \r\n        this.state = {\r\n            selectedArticle: 1 \r\n        }\r\n\r\n        //Other Properties\r\n        this.articleCount = [1, 2, 3];\r\n        \r\n        //Function Bindings: \r\n        this.selectArticle = this.selectArticle.bind(this); \r\n    }\r\n\r\n\r\n    async selectArticle(e) {\r\n        const selected = e.target.id; \r\n        await this.setState({selectedArticle: selected}); \r\n    }\r\n    /**\r\n     * Handler responsible for changing the article that is displayed in this component, based on the id of the selected Navlink. \r\n     */\r\n\r\n\r\n    render() {\r\n\r\n        //Render reduced component if NewsDisplay component is loaded before news GET request is completed: \r\n        if (this.props.articleInfo === null) {\r\n            return (\r\n                <Fragment>\r\n                    <div className=\"row\">\r\n                        <header>No News Loaded! Please do a tweet search in \"Tweet Selection\" and an analysis in \"Tweet Statistics\"</header>\r\n                    </div>\r\n                </Fragment>\r\n            )\r\n        }\r\n        \r\n        //Render full NewsDisplay component: \r\n        else if (this.props.articleInfo) {\r\n            //Use selected NavLink id to assign proper information to Article component: \r\n            const selectionNumber = this.state.selectedArticle;\r\n            const articles = this.articleCount.map(recNum => {\r\n                const recString = recNum.toString();  \r\n                return <Article id={recString} articleNum={selectionNumber} articleInfo={this.props.articleInfo[selectionNumber - 1]}/>\r\n            });  \r\n            let activeArticle = articles[selectionNumber - 1];\r\n\r\n            //Render chosen Article component: \r\n            return (\r\n                <Fragment>\r\n                    <div className=\"row\">\r\n                        <ul className=\"pagination center bottom\">\r\n                            <li className=\"waves-effect\" ><NavLink  onClick={this.selectArticle} exact to=\"/1\" id=\"1\" className=\"waves-effect\">1</NavLink></li>\r\n                            <li className=\"waves-effect\" ><NavLink  onClick={this.selectArticle} exact to=\"/2\" id=\"2\" className=\"waves-effect\">2</NavLink></li>\r\n                            <li className=\"waves-effect\" ><NavLink  onClick={this.selectArticle} exact to=\"/3\" id=\"3\" className=\"waves-effect\">3</NavLink></li>\r\n                        </ul>\r\n                        {activeArticle}\r\n                    </div>\r\n                </Fragment>\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * NewsDisplay component diplsays processed information from the News GET request, via Article components. \r\n * State is used to control which information, from the articleInfo prop is attached to the Article component. \r\n * Component conditionally renders 2 different versions depending on if a news GET request was made previously or not. \r\n */\r\n\r\n\r\nexport default NewsDisplay; ","//Main Module Imports\nimport React, { Fragment, Component } from 'react';\nimport {\n  BrowserRouter,\n  Switch, \n  Route\n} from \"react-router-dom\";\nimport './App.css';\nimport 'materialize-css/dist/css/materialize.min.css';\n\n//Component Imports: \nimport Nav from './Components/Nav';\nimport SideNav from './Components/SideNav_Components/SideNav'; \nimport ErrorPart from './Components/ErrorPart'; \nimport SearchForm from './Components/SearchForm_Components/SearchForm';\nimport LoadingBar from './Components/LoadingBar'\nimport Stat from './Components/Stat_Components/Stat';\nimport NewsDisplay from './Components/NewsDisplay_Components/NewsDisplay';  \n\n//Key Variables: \nconst initial = 'http://localhost:9000/tweetPost'\nconst augment = 'http://localhost:9000/tweetAugment'\nconst newSearch = 'http://localhost:9000/newSearch'\n\n\n\n//App Class Declaration: \nclass App extends Component {\n  constructor () {\n    super(); \n\n    //States:\n    this.state = {\n      activeComponent : null,\n      articleInfo: null,\n      statusCode: 0,  \n      message: '',\n      tweetCount: 0, \n      tweetSearch: 0, \n    }\n\n    //Refs for SearchForm input elements: \n    this.ref1 = React.createRef(); \n    this.ref2 = React.createRef(); \n    this.ref3 = React.createRef(); \n    this.ref4 = React.createRef(); \n    this.ref5 = React.createRef(); \n    this.ref6 = React.createRef(); \n    this.ref7 = React.createRef(); \n    this.ref8 = React.createRef();\n   \n    \n    this.refCollection = [];\n    \n    //Method Bindings:\n    this.componentChange = this.componentChange.bind(this); \n    this.submitHandler1 = this.submitHandler1.bind(this);  \n    this.submitHandler2 = this.submitHandler2.bind(this);  \n    this.formatNews = this.formatNews.bind(this); \n    this.getNews = this.getNews.bind(this);\n    this.prepareStats = this.prepareStats.bind(this);\n    this.newSearch = this.newSearch.bind(this); \n  }\n\n  componentDidUpdate () {\n    this.refCollection = [\n      this.ref1.current, \n      this.ref2.current, \n      this.ref3.current, \n      this.ref4.current, \n      this.ref5.current, \n      this.ref6.current, \n      this.ref7.current, \n      this.ref8.current,  \n      ];\n  }\n  /**\n   * Lifecycle method helps define ref assignments to SearchForm inputs upon updating App level component. \n   */\n\n\n  get initialState() {\n    return {\n      activeComponent: ''\n    };\n  }\n  /**\n   * Resets initial state of activeComponent. \n   * Acts as a precursor to setting the active component to the next approprriate component. \n   */\n\n\n  prepareStats() {\n    let rec; \n\n    //Conditional setting of tweet recommendation based on current total number of processed tweets: \n    if (this.state.tweetCount < 50) {\n      rec = 'Redo search with augment!'; \n    } \n    else if (this.state.tweetCount >= 50) {\n      rec = 'Click \"Read\"! There are enough tweets.'; \n    }\n\n    //Organize relevant tweet statistics for use in Stat component.  \n    let stats = {\n      tweetCount: this.state.tweetCount, \n      tweetSearch: this.state.tweetSearch, \n      rec: rec,  \n    }\n\n    return stats; \n  }\n  /** \n   * Method organizes and formats statistical information of tweets into a form that is easily accessed for the Stat component. \n   * State information based on current total of processed tweets and number of searches are integrated into this object. \n   * A programmatic recommendation for repeat 'augment' searches is made based on the current total of processed tweets.\n  */\n\n  \n\n  async getNews(e) {\n    const button = e.target.id; \n    \n    if (button === 'ReadNews') {\n        //Render Loading Bar:\n        this.renderBar();\n\n        //Fetch news articles from backend and format from json: \n        const response = await fetch('http://localhost:9000/getNews'); \n        const newsArticles = await response.json(); \n        \n        if (newsArticles.code === 200) {\n          //Format news response set to new object and set state and reset tweet statistics: \n            const formatted = this.formatNews(newsArticles.response); \n            await this.setState({ articleInfo: formatted, \n                                  activeComponent: '', \n                                  tweetCount: 0, \n                                  tweetSearch: 0\n                                });\n            \n\n            //Render NewsDisplay:\n            this.setState({activeComponent: button})    \n        } \n\n        //Render ErrorPart component in case of backend error during news GET process: \n        else if (newsArticles.code === 500) {\n          await this.setState({activeComponent: 'Error',\n                                tweetSearch: 0})       \n        }\n        \n    }\n}\n/** \n * Method is invoked to make GET request for news articles from The Guardian API and JSON response is processed for display on NewsDisplay component. \n * Tweet statistics information are reset during this time, in preparation for new searches or in case an error occurs. \n * News article JSON information is handed off to NewsDisplay component as it is loaded. \n * Error handling is also accounted for with basic 500 error handling. \n*/\n\n\n\nformatNews(newsArticles) {\n    let container = [];\n\n    //Loop through newsArticles to format news information according to object format:  \n    for (let article in newsArticles) {\n        let articleInfo = {};\n        let newsObject = newsArticles[article];  \n        articleInfo.title = newsObject.webTitle; \n        articleInfo.section = newsObject.sectionName; \n        articleInfo.url = newsObject.webUrl; \n        articleInfo.date = newsObject.webPublicationDate; \n        container.push(articleInfo); \n    }\n\n    return container\n} \n/** \n * Formats news article JSON response information into a proper form for furhter processing in the NewsDisplay component. \n * A choice of 3 news articles for display is made for this app and thus an array of 3 article objects is given. \n*/\n\n  async componentChange(e) {\n    const active = e.target.id || e;\n    await this.setState(this.initialState)\n    this.setState((prevState) => ({\n      activeComponent: prevState.activeComponent + active\n    }))\n  }\n  /** \n   * An event handler that induces component transitions between specific parts of the component. \n   * This handler is chosen for use in specific buttons, but certain component transition points required specifically defined versions of this handler. \n   * This issue is a big limitation to the app in its current form as it violates DRY principles, which shall be addressed in a future iteration.\n  */\n\n  async renderBar() {\n    await this.setState(this.initialState)\n    this.setState((prevState) => ({\n      activeComponent: prevState.activeComponent + 'Loading'\n    }))\n  }\n  /** \n   * A variation of the componentChange handler used to render the component for the app loading bar. \n  */\n\n  submitHandler1(e) {\n    //Prevent Redirecting of page: \n    e.preventDefault(); \n\n    //Render loading bar until backend signal comes: \n    this.renderBar(); \n\n    //Collection of input Values: \n    const inputValues = this.assembleValues(this.refCollection) \n\n    //Sending to the backend: \n    this.sendValues(inputValues, initial); \n  }\n  /** \n   * A submit handler responsible for assembling input values and submitting them to the backend. \n   * Input values are obtained from attached refs and formatted to an initial object for processing on app backend. \n   * Loading bar behavior is integrated. \n   * Comes in 2 variations: an initial search handler and an augment search handler. \n  */\n\n  submitHandler2(e) {\n    //Prevent Redirecting of page: \n    e.preventDefault(); \n\n    //Render loading bar until backend signal comes: \n    this.renderBar(); \n\n    //Collection of input Values: \n    const inputValues = this.assembleValues(this.refCollection) \n\n    //Sending to the backend: \n    this.sendValues(inputValues, augment); \n  }\n  /** \n   * Same as above search handler notes, but with additional signal for an augment search to be conducted in the backend. \n  */\n\n\n  async renderStat() {\n    await this.setState(this.initialState); \n    this.setState((prevState) => ({\n      activeComponent: prevState.activeComponent + 'Stat'\n    })); \n  }\n  /** \n   * Handler to render the Stat component after a tweet search is requested. \n  */\n\n  assembleValues(refCollection) {\n    const valueCollection = []; \n    \n    //Loop through ref collection and extract values from input elements: \n    refCollection.forEach((ref) => {\n      const value = ref.value; \n\n      if (ref.checked) {\n        //Specifically extract checked value of the relevant radio button: \n        valueCollection.push(ref.checked)\n      } else {\n        valueCollection.push(value); \n      }\n    })\n\n    return valueCollection;\n  }\n  /** \n   * Extracts values from user input fields within the SearchForm component. \n   * Logic included for non-text input fields. \n  */\n\n\n  async sendValues(inputValues, endpoint) {\n    //Assemble array of input values to object format: \n    const postData = Object.assign({}, inputValues); \n\n    //POST request of input data to relevant backend endpoint\n    const fetchRequest = await fetch(endpoint, \n      {\n        method: \"post\",\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(postData)\n      })\n    \n    //Parse JSON response and update relevant tweet statistic states upon response: \n    const response = await fetchRequest.json();  \n    \n    if (response.tweetCount === undefined) {\n      //Fix value of response tweet count to 0 if a bad response occurs from backend:\n      response.tweetCount = 0; \n    }\n\n    \n    this.setState((prevState) => \n      ({tweetCount: prevState.tweetCount + response.tweetCount, \n        tweetSearch: prevState.tweetSearch + 1}));\n\n    //Either render Stat or ErrorPart component depending on response code: \n    if(response.code === 200) {\n      this.renderStat(); \n\n    } else {\n      await this.setState({activeComponent: 'Error', message: response.message, statusCode: response.code})\n    }\n  }\n  /** \n   * Main method for sending user data to conducting a tweet search and then processing the resulting response statistics. \n   * Method format and sends a user input object to backend via fetch API. \n   * The JSON response is parsed, processed, and relevant statistical information is updated for Stat component display. \n   * Error handling, with 500 error message, is integrated for basic error handling purposes. \n  */\n\n\n  async newSearch() {\n    //Make fetch request to appropriate backend route:  \n    const fetchRequest = await fetch(newSearch); \n\n    //Either parse response and initialiaze tweet information or set rendering to ErrorPart component:  \n    const response = await fetchRequest.json(); \n    if (response.code === 200) {\n        await this.setState({tweetCount: 0, tweetSearch: 0});\n    } else {\n        await this.setState({activeComponent: 'Error', message: response.message, statusCode: response.code})\n    }\n  }\n  /** \n   * Method is used to reset tweet statistic information on frontend and to delete input vector information on the backend. \n   * Acts as a 'reset' for the app, erasing any 'memory' of previous searches clustered on a particular set of topics. \n   * Triggered at the Nav component. \n  */\n\n\n\n  render() {\n    //Set activeComponent for conditional rendering: \n    const active = this.state.activeComponent;\n    let activePart;\n  \n    //Conditionally render 'initial search' version of SearchForm: \n    if (active === \"SearchForm\" || active === \"SearchFormError\") {\n      activePart = <Route exact to=\"/search\" component={() => (<SearchForm\n                                                                           submitHandler={this.submitHandler1}\n                                                                           ref1={this.ref1} \n                                                                           ref2={this.ref2}\n                                                                           ref3={this.ref3} \n                                                                           ref4={this.ref4} \n                                                                           ref5={this.ref5}\n                                                                           ref6={this.ref6}\n                                                                           ref7={this.ref7}\n                                                                           ref8={this.ref8}\n                                                                           />)}/>  \n    }\n\n    //Conditionally render 'augment search' version of SearchForm: \n    else if (active === \"Augment\" || active === \"AugmentError\") {\n      activePart = <Route exact to=\"/search\" component={() => (<SearchForm\n                                                                          submitHandler={this.submitHandler2}\n                                                                          ref1={this.ref1} \n                                                                          ref2={this.ref2}\n                                                                          ref3={this.ref3} \n                                                                          ref4={this.ref4} \n                                                                          ref5={this.ref5}\n                                                                          ref6={this.ref6}\n                                                                          ref7={this.ref7}\n                                                                          ref8={this.ref8}\n                                                                          />)}/> \n    }\n\n    //Conditionally render ErrorPart: \n    else if (active === 'Error') {\n      activePart = <ErrorPart \n                              statusCode={this.state.statusCode} \n                              message={this.state.message} \n                              tweetSearch={this.state.tweetSearch}\n                              tweetCount={this.state.tweetCount}\n                              componentChange={this.componentChange}\n                              /> \n    }\n\n    //Conditionally render LoadingBar: \n    else if (active === 'Loading') {\n      activePart = <LoadingBar />      \n    }\n\n    //Conditionally render Stat: \n    else if (active === \"Stat\") {\n      activePart = <Route exact to=\"/stat\" component={() => (<Stat \n                                                                  stats={this.prepareStats()} \n                                                                  getNews={this.getNews} \n                                                                  componentChange={this.componentChange} \n                                                                  />)}/> \n    }\n\n    //Conditionally render NewsDisplay component from Nav or from Stat component: \n    else if (active === \"NewsDisplay\" || active === \"ReadNews\") {\n      activePart = <Route exact to=\"/display\" component={() => (<NewsDisplay articleInfo={this.state.articleInfo} />)}/>\n    }\n\n    //Conditionally render either 'explanation' version of App or 'analysis' version of app. \n    if (active === \"Intro\" || active === null || active === \"Home\" || active === 'nav') {\n      //Render explanation version: \n      return (\n        <BrowserRouter>\n          <Fragment>\n            <Nav newSearch={this.newSearch} componentChange={this.componentChange}/>\n            <SideNav />\n          </Fragment>    \n        </BrowserRouter>\n      )\n    } else {\n      //Render analysis version: \n      return (\n        <BrowserRouter>\n          <Fragment>\n            <Nav newSearch={this.newSearch} componentChange={this.componentChange}/>\n            <Switch>\n              {activePart}          \n            </Switch>\n          </Fragment>    \n        </BrowserRouter>\n        )\n    }\n  }\n}\n/** App Rendering Explanation: \n * App contains two different versions to it: the explanation version and the analysis version. \n * Explanation Version ---> Contains sideNav component that explains overview of the app to the user, with no active component. \n * Analysis Version ---> Contains all lower level components needed to facilitate app search and news processes.  No SideNav here. \n * Analysis version is best thought of as containing all functionality based components of the app. \n * Functionality based component include: SearchForm, Stat, NewsDisplay. \n * Therefore, 2 levels of conditional rendering exist: a 'macro' level for both versions and a 'micro' level for functionality components. \n*/\n\nexport default App;\n\n//Continuation:  \n\n    //4. Ensure that the package.json file contains all the necessary dependencies. \n\n    //5. Host the web app on a hosting service. ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport '../node_modules/materialize-css/dist/css/materialize.min.css';\n\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}